[INCLUDE=style/acmart]

Extended    : False
Anon        : False
TechReport  : True
Logo        : False
Submit      : False
Todo        : True
Tight       : False

Title       : CS 330
Sub Title   :
TechNR      :
Title Note  :

css: clear
css: style/style.css

Short Title : &Title;

Author      : Tim Whiting
Affiliation : Brigham Young University
Email       : tim@whitings.org


Keywords    : CS 330

Bibliography    : papers.bib
Math Dpi        : 300
Math Concurrency: 8
xPackage        : trfrac
Package         : graphicx
Embed           : 1000

prelinecorrection: [\setlength\preadjust{0.1em}]{input:texraw}

.supplement {
  replace: "&source;"
}

.tronly {
  display:none;
}

.proof {
  margin-top: 1em;
  background-color: gainsboro;
}

@techreport .tronly {
  display:block;
}

@submit .supplement {
  replace: clear;
  replace: "&source; in the tech report"
}

.intro1 {
  display: none;
}

@calculate .nocalculate {
  display: none;
}

@nocalculate .calculate {
  display: none;
}

[INCLUDE=style/common-style]
[INCLUDE=style/koka-style]


~ HtmlOnly
[TITLE]

[TOC]
~

~TexRaw
\author{Tim Whiting}
\affiliation{
  \institution{Brigham Young University}
  \city{Provo}
  \state{UT}
  \country{USA}
}
\email{tim@whitings.org}

\title{\mdtitle}
%\subtitle{\mdsubtitle}
\maketitle
\def\shorttitle{\acmshorttitle}
~

~ tronly
~~ texraw
\makeatletter
\fancypagestyle{firstpagestyle}{%
  \fancyhf{}%
  \fancyfoot[C]{\small\thepage}%
}
\fancypagestyle{standardpagestyle}{%
  \fancyhf{}%
  \fancyfoot[C]{\small\thepage}%
}
\makeatother
\pagestyle{standardpagestyle}
~~
~

~ MathDefs
\newcommand{\gray}[1]{\colorbox{gainsboro}{\strut$#1$}}
\newcommand{\tr}[1]{\lfloor #1\rfloor}
\newcommand{\comm}{\mathbin{\triangleright}}

\newcommand\under[2]{\underset{\raisebox{2mm}{$\scriptstyle #2$}}{#1}}
\newcommand\inhx[2]{\under{#1}{\under{\uparrow}{#2}}}
\newcommand\synx[2]{\under{#1}{\under{\downarrow}{#2}}}
\newcommand\inh[1]{\under{#1}{\under\uparrow{\textsf{inh}}}}
\newcommand\syn[1]{\under{#1}{\under\downarrow{\textsf{syn}}}}

\newcommand\colonover[1]{\overset{\raisebox{-2mm}{$\scriptstyle #1$}}{:}}

\newcommand\rigid[1]{\fbox{\ensuremath{#1}}}
\newcommand\boxy[1]{\fbox{\ensuremath{#1}}}

\newcommand\syminfer{\,:\,}
\newcommand\symcheck{\,\colonover{\color{red}{\leftarrow}}\,}
%\newcommand\syminfer{\,:\,}
%\newcommand\symcheck{\,::\,}
\newcommand\symboth{\,\colonover{\leftrightarrow}\,}
\newcommand\lessmatch{\overset{\raisebox{-2mm}{$\scriptstyle\color{blue}\rightarrow$}}{\approx}}
\newcommand\lesschkone{\overset{\raisebox{-2mm}{$\scriptstyle\color{red}\leftarrow$}}{\cong}}
\newcommand\lesschkdeep{\overset{\raisebox{-2mm}{$\scriptstyle\color{red}\leftarrow$}}{\approx}}
~

# Introduction

Fall 2024 - CS 330 - Programming Languages

This semester you will learn:

* How to write in a functional style
* Fundamentals of programming languages (Build a language!)
* Some unique features of different programming languages

## Expectations and designs for the class

### Expectations

* Watch video tutorials for the project before class
* Glance at the project requirements before class
* Participate in class discussions
* Come to me or the TA for tangential questions that might take awhile if you want to spend the class time learning new languages
* Don't let me move on if you don't understand something fundamental
* Keep asking questions until you understand
* Be vocal about when you do understand, so I know to move on and not bore you to death

#### Alternatives

???

## Schedule

Here is what a minimal schedule for optional 1 would look like:
We only cover about 6 new programming languages, and might only cover 1 or 2 of their unique features.

+--------------------+-------------------+---------------------+--------------------+-------------------+-----------------------+
| Tuesday   | Topic |  Assignment| Thursday  | Topic |  Assignment   |
+--------------------+-------------------+---------------------+--------------------+-------------------+-----------------------+
| N/A  | | | Sept 5th  | Syllabus / Intro to FP | |
+---+---+---+---+---+---+
| Sept 10th | HtDP | | Sept 12th | Interp | |
+---+---+---+---+---+---+
| Sept 17th | Functions/Substitution | | Sept 19th | JS - Dynamic Types | |
+---+---+---+---+---+---+
| Sept 24th | Binding/Environments | | Sept 26th | TS - Gradual Typing | |
+---+---+---+---+---+---+
| Oct 1st | Lambdas | | Oct 3rd | Dart - Strong Typing & Null Safety | |
+---+---+---+---+---+---+
| Oct 8th | State/Store | | Oct 10th | Rust - Memory Management | |
+---+---+---+---+---+---+
| Oct 15th | Records/Variables | | Oct 17th | Scheme - Macros | |
+---+---+---+---+---+---+
| Oct 22nd | Encoding / Recursion | | Oct 24th | Haskell - Intro | |
+---+---+---+---+---+---+
| Oct 29th | Lazy | | Oct 31st | Haskell - Laziness | |
+---+---+---+---+---+---+
| Nov 5th | Continuations / Control | | Nov 7th | Haskell - Monads & Typeclasses | |
+---+---+---+---+---+---+
| Nov 12th | Compilation / GC | | Nov 14th | Prolog - Logic / Relational Programming | |
+---+---+---+---+---+---+
| Nov 19th | Objects / Classes | | Nov 21st | Koka - Algebraic Effects | |
+---+---+---+---+---+---+
| Nov 26th | Types / Subtypes | | Nov 28th | Thanksgiving | |
+---+---+---+---+---+---+
| Dec 3rd | Type Inference & More | | Dec 5th | Koka - Reference Counting / FBIP | |
+---+---+---+---+---+---+
| Dec 10th | Review | | | | |
+---+---+---+---+---+---+


## Functional Programming
We will be adhering to a pure functional programming style for our implementations in this class.

In particular this means that you will not be using mutable state to implement your interpreters.

To get started with functional programming in Splait, please go through the following tutorials:

* [Intro to Splait](https://www.youtube.com/watch?v=ZoWPZpqSYt4&list=PLbdXd8eufjyX42OdF_QnDf4w9NcvWPAZr)
* [How to Design Programs](https://www.youtube.com/watch?v=-5Al4TfaZ94&list=PLbdXd8eufjyXyreOq06tSPhJi1u-dqb0p)

Your project will be to create:
- A simple interpreter for the lambda calculus, and a few primitives
- Create variants of the interpreter to implement some other fundamental programming language concepts.

You will come to class having watched the video introductions and tutorials to the basic concepts, and having attempted at least the first few exercises.
We will cover more complex exercises in class, in pairs, groups, and working together as a class.
This should solidify your understanding so that the homework and project should be easy.

For Thursday classes, we will have a similar approach to class time, but we will be focused on learning some unique programming language features from a variety of languages.

You will be expected to have watched the short videos explaining what you will be learning, and you will be expected to participate in class going over the exercises.

My goal as a teacher is to: 
- Help you understand the subtleties involved in programming language concepts and implementations
- Help you understand how to design robust solutions to problems by adopting a functional and data first approach
- Give you meaningful experience in a variety of programming languages
- Give you a chance to think critically and defend your design decisions and ideas
- Give you a chance to learn from and teach your peers difficult concepts
- Spend time in class deepening knowledge in a way you can't get from online courses
- Learn from you 

## Outline for lessons

### JS - Dynamic Types
- What are types? A way to distinguish between different values.

[BIB]

&pagebreak;

~ texraw
\appendix
~

&pagebreak;

