[INCLUDE=style/acmart]

Extended    : False
Anon        : False
TechReport  : True
Logo        : False
Submit      : False
Todo        : True
Tight       : False

Title       : CS 330
Sub Title   :
TechNR      :
Title Note  :

css: clear
css: style/style.css

Short Title : &Title;

Author      : Tim Whiting
Affiliation : Brigham Young University
Email       : tim@whitings.org


Keywords    : CS 330

Bibliography    : papers.bib
Math Dpi        : 300
Math Concurrency: 8
xPackage        : trfrac
Package         : graphicx
Embed           : 1000

prelinecorrection: [\setlength\preadjust{0.1em}]{input:texraw}

.supplement {
  replace: "&source;"
}

.tronly {
  display:none;
}

.proof {
  margin-top: 1em;
  background-color: gainsboro;
}

@techreport .tronly {
  display:block;
}

@submit .supplement {
  replace: clear;
  replace: "&source; in the tech report"
}

.intro1 {
  display: none;
}

@calculate .nocalculate {
  display: none;
}

@nocalculate .calculate {
  display: none;
}

[INCLUDE=style/common-style]
[INCLUDE=style/koka-style]


~ HtmlOnly
[TITLE]

[TOC]
~

~TexRaw
\author{Tim Whiting}
\affiliation{
  \institution{Brigham Young University}
  \city{Provo}
  \state{UT}
  \country{USA}
}
\email{tim@whitings.org}

\title{\mdtitle}
%\subtitle{\mdsubtitle}
\maketitle
\def\shorttitle{\acmshorttitle}
~

~ tronly
~~ texraw
\makeatletter
\fancypagestyle{firstpagestyle}{%
  \fancyhf{}%
  \fancyfoot[C]{\small\thepage}%
}
\fancypagestyle{standardpagestyle}{%
  \fancyhf{}%
  \fancyfoot[C]{\small\thepage}%
}
\makeatother
\pagestyle{standardpagestyle}
~~
~

~ MathDefs
\newcommand{\gray}[1]{\colorbox{gainsboro}{\strut$#1$}}
\newcommand{\tr}[1]{\lfloor #1\rfloor}
\newcommand{\comm}{\mathbin{\triangleright}}

\newcommand\under[2]{\underset{\raisebox{2mm}{$\scriptstyle #2$}}{#1}}
\newcommand\inhx[2]{\under{#1}{\under{\uparrow}{#2}}}
\newcommand\synx[2]{\under{#1}{\under{\downarrow}{#2}}}
\newcommand\inh[1]{\under{#1}{\under\uparrow{\textsf{inh}}}}
\newcommand\syn[1]{\under{#1}{\under\downarrow{\textsf{syn}}}}

\newcommand\colonover[1]{\overset{\raisebox{-2mm}{$\scriptstyle #1$}}{:}}

\newcommand\rigid[1]{\fbox{\ensuremath{#1}}}
\newcommand\boxy[1]{\fbox{\ensuremath{#1}}}

\newcommand\syminfer{\,:\,}
\newcommand\symcheck{\,\colonover{\color{red}{\leftarrow}}\,}
%\newcommand\syminfer{\,:\,}
%\newcommand\symcheck{\,::\,}
\newcommand\symboth{\,\colonover{\leftrightarrow}\,}
\newcommand\lessmatch{\overset{\raisebox{-2mm}{$\scriptstyle\color{blue}\rightarrow$}}{\approx}}
\newcommand\lesschkone{\overset{\raisebox{-2mm}{$\scriptstyle\color{red}\leftarrow$}}{\cong}}
\newcommand\lesschkdeep{\overset{\raisebox{-2mm}{$\scriptstyle\color{red}\leftarrow$}}{\approx}}
~

# Introduction

Fall 2024 - CS 330 - Programming Languages

This semester you will learn:

* How to write in a functional style
* Fundamentals of programming languages (Build a language!)
* Some unique features of different programming languages

## Expectations and designs for the class

### Expectations

* Watch video tutorials for the project before class
* Glance at the project requirements before class
* Participate in class discussions
* Come to me or the TA for tangential questions that might take awhile if you want to spend the class time learning new languages
* Don't let me move on if you don't understand something fundamental
* Keep asking questions until you understand
* Be vocal about when you do understand, so I know to move on and not bore you to death

### Designs

#### Option 1

* Tuesday: Working in class on project, answering questions about the project
* Thursday: Lecture on a unique programming language feature

Pros: 

* You get to work on the project in class, and get help from the instructor

Cons: 

* TA gets fewer opportunities to help you and explain things differently from the instructor
* Your time is spent on a project which has many resources online, and less on learning unique things that are harder or more spread out online
* You don't get to practice or use the new programming languages concepts in action

#### Option 2

* Tuesday: Spend the first half answering questions about the project, second half introducing a unique programming language feature
* Thursday: Do some basic exercises in a new programming language, to practically apply the concepts you learn

Pros: 

* You can ask the TAs and teacher for help on the project, and the TA can spend more time to help you debug specific issues
* You get to practice and use the new programming languages concepts, not just build an interpreter

Cons: 

* You need to spend more time on your own for the project - just like other classes
* Towards the end of the class we might take more time on Tuesdays for the project sincer there will probably be more questions


#### Alternatives

???

## Schedule

Here is what a minimal schedule for optional 1 would look like:
We only cover about 6 new programming languages, and might only cover 1 or 2 of their unique features.

+--------------------+-------------------+---------------------+--------------------+-------------------+-----------------------+
| Tuesday   | Topic |  Assignment| Thursday  | Topic |  Assignment   |
+--------------------+-------------------+---------------------+--------------------+-------------------+-----------------------+
| N/A  | | | Sept 5th  | Syllabus / Intro  | |
+---+---+---+---+---+---+
| Sept 10th | FP Lists / HOF | | Sept 12th | FP ADTs | |
+---+---+---+---+---+---+
| Sept 17th | FP Extras | | Sept 19th | JS - Dynamic Types | |
+---+---+---+---+---+---+
| Sept 24th | Writing a Parser | | Sept 26th | TS - Gradual Typing | |
+---+---+---+---+---+---+
| Oct 1st | Evaluating Expressions | | Oct 3rd | Dart - Strong Typing | |
+---+---+---+---+---+---+
| Oct 8th | Evaluating Functions | | Oct 10th | Rust - Memory Management | |
+---+---+---+---+---+---+
| Oct 15th | Dynamic Scope | | Oct 17th | Scheme - Macros | |
+---+---+---+---+---+---+
| Oct 22nd | Static Scope Binding | | Oct 24th | Haskell - Laziness | |
+---+---+---+---+---+---+
| Oct 29th | Evaluating Loops | | Oct 31st | Haskell - Monads | |
+---+---+---+---+---+---+
| Nov 5th | Implementing State | | Nov 7th | Haskell - ?? | |
+---+---+---+---+---+---+
| Nov 12th | Desugaring Objects | | Nov 14th | Prolog - Logic / Relational Programming | |
+---+---+---+---+---+---+
| Nov 19th | Type Checking | | Nov 21st | Koka - Algebraic Effects | |
+---+---+---+---+---+---+
| Nov 26th | Implementing Control | | Nov 28th | Thanksgiving | |
+---+---+---+---+---+---+
| Dec 3rd | Implementing GC | | Dec 5th | Koka - Algebraic Effects | |
+---+---+---+---+---+---+
| Dec 10th | Implementing GC | | | | |
+---+---+---+---+---+---+


## BYU language
The BYU language is a simple programming language that will be used to demonstrate the concepts we learn in class.

The syntax is as follows:
~ mathpre
X ::= x,y (identifiers)
E ::= x | e0 op e1 | if e0 then e1 else e2 | while e0 do e1 | e0(e1, ..., en)
~

## Functional Programming
We will be adhering to a pure functional programming style for our implementations in this class.

In particular this means that we will not be using mutable state.

To get started with functional programming in Splait, please go through the following tutorials:

* [Intro to Splait](https://www.youtube.com/watch?v=ZoWPZpqSYt4&list=PLbdXd8eufjyX42OdF_QnDf4w9NcvWPAZr)
* [How to Design Programs](https://www.youtube.com/watch?v=-5Al4TfaZ94&list=PLbdXd8eufjyXyreOq06tSPhJi1u-dqb0p)



[BIB]

&pagebreak;

~ texraw
\appendix
~

&pagebreak;

